<Project DefaultTargets="Build;Analyze;UnitTest;IntegrationTest;Coverage;FunctionalTest" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<UsingTask AssemblyFile="tools\msbuild_community_tasks\MSBuild.Community.Tasks.dll"
			TaskName="MSBuild.Community.Tasks.FileUpdate"/>
	<UsingTask AssemblyFile="tools\StyleCop\Microsoft.StyleCop.dll" TaskName="StyleCopTask"/>
	<!-- Had to override the default MSBuild Exec task, because it was using an older version -->
	<UsingTask AssemblyFile="tools\msbuild_community_tasks\Microsoft.Build.Tasks.v4.0.dll"  TaskName="Exec" />
	<!-- Had to add the MSBuild XmlPeek task, because it was using an older version -->
	<UsingTask AssemblyFile="tools\msbuild_community_tasks\Microsoft.Build.Tasks.v4.0.dll"  TaskName="XmlPeek" />
	<UsingTask AssemblyFile="tools\msbuild_community_tasks\MSBuild.ExtensionPack.dll"  TaskName="MsBuildHelper" />
	<PropertyGroup>
		<Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
		<ProjectName>RouteCalculator</ProjectName>
	</PropertyGroup>
	<ItemGroup>
		<AnalyzedProjects Include="$(ProjectName)">
			<AnalyzedProject>$(ProjectName)</AnalyzedProject>
			<AnalyzedAssembly>$(ProjectName).exe</AnalyzedAssembly>
		</AnalyzedProjects>
		<AnalyzedProjects Include="$(ProjectName).Test">
			<AnalyzedProject>$(ProjectName).Test</AnalyzedProject>
			<AnalyzedAssembly>$(ProjectName).Test.exe</AnalyzedAssembly>
		</AnalyzedProjects>
		<AnalyzedProjects Include="$(ProjectName).IntegrationTest">
			<AnalyzedProject>$(ProjectName).IntegrationTest</AnalyzedProject>
			<AnalyzedAssembly>$(ProjectName).IntegrationTest.exe</AnalyzedAssembly>
		</AnalyzedProjects>
		<AnalyzedProjects Include="$(ProjectName).FunctionalTest">
			<AnalyzedProject>$(ProjectName).FunctionalTest</AnalyzedProject>
			<AnalyzedAssembly>$(ProjectName).FunctionalTest.exe</AnalyzedAssembly>
		</AnalyzedProjects>
		<TestProjects Include="UnitTest">
			<Type>Test</Type>
			<ReportName>UnitTest</ReportName>
		</TestProjects>
		<TestProjects Include="IntegrationTest">
			<Type>IntegrationTest</Type>
			<ReportName>IntegrationTest</ReportName>
		</TestProjects>
		<TestProjects Include="FunctionalTest">
			<Type>FunctionalTest</Type>
			<ReportName>FunctionalTest</ReportName>
		</TestProjects>
	</ItemGroup>
	<Target Name="Build">
		<MSBuild
			Targets="Clean;Rebuild"
			Projects="$(ProjectName)\$(ProjectName).csproj;$(ProjectName).Test\$(ProjectName).Test.csproj;$(ProjectName).IntegrationTest\$(ProjectName).IntegrationTest.csproj;$(ProjectName).FunctionalTest\$(ProjectName).FunctionalTest.csproj"
			Properties="Configuration=$(Configuration)"
			ContinueOnError="false"/>
	</Target>
	<Target Name="UnitTest" DependsOnTargets="Build">
		<Exec
			Command="$(ProjectName).Test\bin\$(Configuration)\$(ProjectName).Test.exe /xml=UnitTestReport.xml"
			ContinueOnError="false" />
		<XmlPeek Condition="Exists('UnitTestReport.xml')" XmlInputPath="UnitTestReport.xml" Query="//test-case[@executed='True' and @success='False']/failure/message" >
			<Output TaskParameter="Result" ItemName="Failures"></Output>
		</XmlPeek>
		<Error Condition="'@(Failures)' != ''" Text="Unit tests failed: %(Failures.Identity)"></Error>
	</Target>
	<Target Name="IntegrationTest" DependsOnTargets="Build">
		<Exec
			Command="$(ProjectName).IntegrationTest\bin\$(Configuration)\$(ProjectName).IntegrationTest.exe /xml=IntegrationTestReport.xml"
			ContinueOnError="false"/>
		<XmlPeek Condition="Exists('IntegrationTestReport.xml')" XmlInputPath="IntegrationTestReport.xml" Query="//test-case[@executed='True' and @success='False']/failure/message" >
			<Output TaskParameter="Result" ItemName="Failures"></Output>
		</XmlPeek>
		<Error Condition="'@(Failures)' != ''" Text="Integration tests failed: %(Failures.Identity)"></Error>
	</Target>
	<Target Name="Coverage" DependsOnTargets="Build">
		<CallTarget Targets="CoverageAnalysis"></CallTarget>
		<!--
		<Exec Command="tools\OpenCover\OpenCover.Console.exe -register:user -target:$(ProjectName).Test\bin\$(Configuration)\$(ProjectName).Test.exe &quot;-targetdir:$(ProjectName).Test\bin\$(Configuration)&quot; -output:UnitTestCoverage.xml &quot;-filter:+[$(ProjectName)*]* -[$(ProjectName).Test*]*&quot;" />
		<XmlPeek Condition="Exists('UnitTestCoverage.xml')" XmlInputPath="UnitTestCoverage.xml" Query="//CoverageSession/Modules/Module/Classes/Class/Methods/Method/SequencePoints/SequencePoint[@vc > 0]" >
			<Output TaskParameter="Result" ItemName="UnitTestCoveredLines"></Output>
		</XmlPeek>
		<XmlPeek Condition="Exists('UnitTestCoverage.xml')" XmlInputPath="UnitTestCoverage.xml" Query="//CoverageSession/Modules/Module/Classes/Class/Methods/Method/SequencePoints/SequencePoint[@vc = 0]" >
			<Output TaskParameter="Result" ItemName="UnitTestUncoveredLines"></Output>
		</XmlPeek>
		
		<MsBuildHelper TaskAction="GetItemCount" InputItems1="@(UnitTestCoveredLines)">
            <Output TaskParameter="ItemCount" PropertyName="CoveredLines"/>
        </MsBuildHelper>
		<MsBuildHelper TaskAction="GetItemCount" InputItems1="@(UnitTestUncoveredLines)">
            <Output TaskParameter="ItemCount" PropertyName="UncoveredLines"/>
        </MsBuildHelper>
		<Error Condition="$([MSBuild]::Divide($(CoveredLines),$(UncoveredLines))) &lt;  0.8" Text="Unit Test coverage is below 80 percent."></Error>
		<Exec Command="tools\OpenCover\OpenCover.Console.exe -register:user -target:$(ProjectName).IntegrationTest\bin\$(Configuration)\$(ProjectName).IntegrationTest.exe &quot;-targetdir:$(ProjectName).IntegrationTest\bin\$(Configuration)&quot; -output:IntegrationTestCoverage.xml &quot;-filter:+[$(ProjectName)*]* -[$(ProjectName).IntegrationTest*]*&quot;" />
		<Exec Command="tools\OpenCover\OpenCover.Console.exe -register:user -target:$(ProjectName).FunctionalTest\bin\$(Configuration)\$(ProjectName).FunctionalTest.exe &quot;-targetdir:$(ProjectName).FunctionalTest\bin\$(Configuration)&quot; -output:FunctionalTestCoverage.xml &quot;-filter:+[$(ProjectName)*]* -[$(ProjectName).FunctionalTest*]*&quot;" />
		-->
		<Exec Command="tools\reportgenerator\ReportGenerator.exe -reports:UnitTestCoverage.xml;IntegrationTestCoverage.xml;FunctionalTestCoverage.xml -targetdir:.\coverage-report -reporttypes:XML;HTML" />
		
	</Target>
	<Target Name="FunctionalTest" DependsOnTargets="Build">
		<Exec
			Command="$(ProjectName).FunctionalTest\bin\$(Configuration)\$(ProjectName).FunctionalTest.exe /xml=FunctionalTestReport.xml"
			ContinueOnError="false"/>
		<XmlPeek Condition="Exists('FunctionalTestReport.xml')" XmlInputPath="FunctionalTestReport.xml" Query="//test-case[@executed='True' and @success='False']/failure/message" >
			<Output TaskParameter="Result" ItemName="Failures"></Output>
		</XmlPeek>
		<Error Condition="'@(Failures)' != ''" Text="Functional tests failed: %(Failures.Identity)"></Error>

	</Target>
	<Target Name="Analyze" DependsOnTargets="Build">
		<!-- FxCopAnalyze all projects -->
		<CallTarget Targets="RunFxCop"></CallTarget>
		<!-- StylCop analyze all of the projects -->
		<CreateItem Include="$(ProjectName)*\**\*.cs;$(ProjectName)*\*.cs;">
			<Output TaskParameter="Include" ItemName="StyleCopFiles"/>
		</CreateItem>
		<StyleCopTask ProjectFullPath="$(MSBuildProjectFile)"
					  SourceFiles="@(StyleCopFiles)"
					  ForceFullAnalysis="true"
					  TreatErrorsAsWarnings="false"
					  OutputFile="StyleCopReport.xml"
					  CacheResults="true"
					  ContinueOnError="false"/>
	</Target>
	
	<Target Name="CoverageAnalysis" Inputs="%(TestProjects.Type);%(TestProjects.ReportName)" DependsOnTargets="Build" Outputs="CoveredLines;UncoveredLines">
		<Exec Command="tools\OpenCover\OpenCover.Console.exe -register:user -target:$(ProjectName).%(TestProjects.Type)\bin\$(Configuration)\$(ProjectName).%(TestProjects.Type).exe &quot;-targetdir:$(ProjectName).%(TestProjects.Type)\bin\$(Configuration)&quot; -output:%(TestProjects.ReportName)Coverage.xml &quot;-filter:+[$(ProjectName)*]* -[$(ProjectName).%(TestProjects.Type)*]*&quot;" />
		<XmlPeek Condition="Exists('%(TestProjects.ReportName)Coverage.xml')" XmlInputPath="%(TestProjects.ReportName)Coverage.xml" Query="//CoverageSession/Modules/Module/Classes/Class/Methods/Method/SequencePoints/SequencePoint[@vc > 0]" >
			<Output TaskParameter="Result" ItemName="CoveredLinesFound"></Output>
		</XmlPeek>
		<XmlPeek Condition="Exists('%(TestProjects.ReportName)Coverage.xml')" XmlInputPath="%(TestProjects.ReportName)Coverage.xml" Query="//CoverageSession/Modules/Module/Classes/Class/Methods/Method/SequencePoints/SequencePoint[@vc = 0]" >
			<Output TaskParameter="Result" ItemName="UncoveredLinesFound"></Output>
		</XmlPeek>
		<MsBuildHelper TaskAction="GetItemCount" InputItems1="@(CoveredLinesFound)">
            <Output TaskParameter="ItemCount" PropertyName="CoveredLines"/>
        </MsBuildHelper>
		<MsBuildHelper TaskAction="GetItemCount" InputItems1="@(UncoveredLinesFound)">
            <Output TaskParameter="ItemCount" PropertyName="UncoveredLines"/>
        </MsBuildHelper>
		<Error Condition="$([MSBuild]::Divide($(CoveredLines),$(UncoveredLines))) &lt;  0.8" Text="Unit Test coverage is below 80 percent. Coverage: $([System.Math]::Round($([MSBuild]::Divide($(CoveredLines),$(UncoveredLines))), 2))"></Error>
	</Target>

	<Target Name="RunFxCop" Inputs="%(AnalyzedProjects.AnalyzedProject);%(AnalyzedProjects.AnalyzedAssembly)" DependsOnTargets="Build" Outputs="Violations">
		<Delete Condition="Exists('FxCopReport.xml')" Files="FxCopReport.xml" />
		<Delete Condition="Exists('fxcop_rules_project_artifact.FxCop')" Files="fxcop_rules_project_artifact.FxCop" />
		<Copy SourceFiles="fxcop_rules_project.FxCop" DestinationFiles="fxcop_rules_project_artifact.FxCop" />
		<FileUpdate Files="fxcop_rules_project_artifact.FxCop"
					Regex="(.*Target Name=&quot;)([^&quot;]*)(&quot;.*)"
					ReplacementText="$1$(MSBuildProjectDirectory)\%(AnalyzedProjects.AnalyzedProject)\bin\$(Configuration)\%(AnalyzedProjects.AnalyzedAssembly)$3"/>

		<Exec Command="tools\fxcop\FxCopCmdCaller.bat /project:$(MSBuildProjectDirectory)\fxcop_rules_project_artifact.FxCop /out:FxCopReport.xml"
			  CustomErrorRegularExpression="(CA(?!0060)([0-9]{4})){1,}"/>

		<Delete Condition="Exists('fxcop_rules_project_artifact.FxCop')" Files="fxcop_rules_project_artifact.FxCop" />
		<XmlPeek Condition="Exists('FxCopReport.xml')" XmlInputPath="FxCopReport.xml" Query="//Exception[@Keyword!='CA0060' and @Keyword!='CA0058' and @Keyword!='CA0001']/ExceptionMessage | //Rule/Name" >
			<Output TaskParameter="Result" ItemName="Violations"></Output>
		</XmlPeek>
		<Error Condition="'@(Violations)' != ''" Text="FxCop found rule violations: @(Violations)"></Error>
	</Target>
</Project>