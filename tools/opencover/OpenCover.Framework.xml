<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenCover.Framework</name>
    </assembly>
    <members>
        <member name="T:OpenCover.Framework.Bootstrapper">
            <summary>
            Wraps up the Dependancy Injection framework
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Bootstrapper.#ctor(log4net.ILog)">
            <summary>
            Constructor
            </summary>
            <param name="logger">the log4net logger to be used for logging</param>
        </member>
        <member name="M:OpenCover.Framework.Bootstrapper.Initialise(OpenCover.Framework.IFilter,OpenCover.Framework.ICommandLine,OpenCover.Framework.Persistance.IPersistance)">
            <summary>
            Initialise the bootstrapper
            </summary>
            <param name="filter">a series of filters</param>
            <param name="commandLine">command line options needed by other components</param>
            <param name="persistance">a persistence object</param>
        </member>
        <member name="P:OpenCover.Framework.Bootstrapper.Container">
            <summary>
            Access the unity container
            </summary>
        </member>
        <member name="T:OpenCover.Framework.CommandLineParser">
            <summary>
            Parse the command line arguments and set the appropriate properties
            </summary>
        </member>
        <member name="T:OpenCover.Framework.CommandLineParserBase">
            <summary>
            Parse the command line arguments based on the following syntax: <br/>
            [-argument[:optional-value]] [-argument[:optional-value]]
            </summary>
        </member>
        <member name="M:OpenCover.Framework.CommandLineParserBase.HasArgument(System.String)">
            <summary>
            Check if an argument of the name given was part of the supplied arguments
            </summary>
            <param name="argument">an argument name</param>
            <returns>true - if argument was supplied</returns>
        </member>
        <member name="M:OpenCover.Framework.CommandLineParserBase.GetArgumentValue(System.String)">
            <summary>
            Get the the value of a named argument
            </summary>
            <param name="argument">an argument name</param>
            <returns>the value supplied by an argument</returns>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParserBase.ArgumentCount">
            <summary>
            Get the number of extracted arguments
            </summary>
        </member>
        <member name="T:OpenCover.Framework.ICommandLine">
            <summary>
            properties exposed by the command line object for use in other entities
            </summary>
        </member>
        <member name="P:OpenCover.Framework.ICommandLine.TargetDir">
            <summary>
            the target directory
            </summary>
        </member>
        <member name="P:OpenCover.Framework.ICommandLine.MergeByHash">
            <summary>
            If specified then results to be merged by matching hash 
            </summary>
        </member>
        <member name="P:OpenCover.Framework.ICommandLine.ShowUnvisited">
            <summary>
            Show the unvisited classes/methods at the end of the coverage run
            </summary>
        </member>
        <member name="M:OpenCover.Framework.CommandLineParser.#ctor(System.String[])">
            <summary>
            Constructs the parser
            </summary>
            <param name="arguments">An array of command line arguments</param>
        </member>
        <member name="M:OpenCover.Framework.CommandLineParser.Usage">
            <summary>
            Get the usage string 
            </summary>
            <returns>The usage string</returns>
        </member>
        <member name="M:OpenCover.Framework.CommandLineParser.ExtractAndValidateArguments">
            <summary>
            Extract the arguments and validate them; also validate the supplied options when simple
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.Register">
            <summary>
            the switch -register was supplied
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.UserRegistration">
            <summary>
            the switch -register with the user argument was supplied i.e. -register:user
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.Target">
            <summary>
            The target executable that is to be profiles
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.TargetDir">
            <summary>
            The working directory that the action is to take place
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.TargetArgs">
            <summary>
            The arguments that are to be passed to the Target
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.PrintUsage">
            <summary>
            Requests that the user wants to see the commandline help
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.OutputFile">
            <summary>
            The name of the output file
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.NoDefaultFilters">
            <summary>
            If specified then the default filters should not be applied
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.MergeByHash">
            <summary>
            If specified then results to be merged by matching hash 
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.ShowUnvisited">
            <summary>
            Show the unvisited classes/methods at the end of the coverage run
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.ReturnTargetCode">
            <summary>
            Show the unvisited classes/methods at the end of the coverage run
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.Filters">
            <summary>
            A list of filters
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.ReturnCodeOffset">
            <summary>
            The offset for the return code - this is to help avoid collisions between opencover return codes and the target
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.AttributeExclusionFilters">
            <summary>
            A list of attribute exclusion filters
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.FileExclusionFilters">
            <summary>
            A list of file exclusion filters
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.TestFilters">
            <summary>
            A list of test file filters
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.LogLevel">
            <summary>
            The logging level based on log4net.Core.Level
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.Service">
            <summary>
            This switch means we should treat the mandatory target as a service
            </summary>
        </member>
        <member name="P:OpenCover.Framework.CommandLineParser.OldStyleInstrumentation">
            <summary>
            Use the old style of instrumentation that even though not APTCA friendly will
            work when - ngen install /Profile "mscorlib" - has been used
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Manager.ProfilerManager">
            <summary>
            This is the core manager for integrating the host the target 
            application and the profiler 
            </summary>
            <remarks>It probably does too much!</remarks>
        </member>
        <member name="T:OpenCover.Framework.Model.BranchPoint">
            <summary>
            a branch point
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Model.InstrumentationPoint">
            <summary>
            An instrumentable point
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Model.InstrumentationPoint.GetVisitCount(System.UInt32)">
            <summary>
            Get the number of recorded visit points for this identifier
            </summary>
            <param name="spid">the sequence point identifier - NOTE 0 is not used</param>
        </member>
        <member name="M:OpenCover.Framework.Model.InstrumentationPoint.AddVisitCount(System.UInt32,System.UInt32,System.Int32)">
            <summary>
            Add a number of recorded visit pints against this identifier
            </summary>
            <param name="spid">the sequence point identifier - NOTE 0 is not used</param>
            <param name="trackedMethodId">the id of a tracked method - Note 0 means no method currently tracking</param>
            <param name="sum">the number of visit points to add</param>
        </member>
        <member name="P:OpenCover.Framework.Model.InstrumentationPoint.Count">
            <summary>
            Return the number of visit points
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.BranchPoint.Path">
            <summary>
            A path that can be taken
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Model.SkippedEntity">
            <summary>
            The entity can be skipped from coverage but needs to supply a reason
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Model.SkippedEntity.ShouldSerializeSkippedDueTo">
            <summary>
            If this class has been skipped then this value will allow the data to be serialized
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.SkippedEntity.SkippedDueTo">
            <summary>
            If this class has been skipped then this value will describe why
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Model.SkippedMethod">
            <summary>
            Describes how a method or class was skipped
            </summary>
        </member>
        <member name="F:OpenCover.Framework.Model.SkippedMethod.Attribute">
            <summary>
            Entity was skipped due to a matching exclusion attribute filter
            </summary>
        </member>
        <member name="F:OpenCover.Framework.Model.SkippedMethod.File">
            <summary>
            Entity was skipped due to a matching exclusion file filter
            </summary>
        </member>
        <member name="F:OpenCover.Framework.Model.SkippedMethod.Filter">
            <summary>
            Entity was skipped due to a matching exclusion module/class filter 
            </summary>
        </member>
        <member name="F:OpenCover.Framework.Model.SkippedMethod.MissingPdb">
            <summary>
            Entity was skipped due to a missing PDB
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.TrackedMethodRef.UniqueId">
            <summary>
            unique id assigned 
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Model.TrackedMethod">
            <summary>
            A method being tracked
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.TrackedMethod.UniqueId">
            <summary>
            unique id assigned 
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.TrackedMethod.MetadataToken">
            <summary>
            The MetadataToken used to identify this entity within the assembly
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.TrackedMethod.Name">
            <summary>
            The name of the method being tracked
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.TrackedMethod.Strategy">
            <summary>
            The reason/plugin why the method is being tracked
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Persistance.BasePersistance">
            <summary>
            A basic layer that aggregates the data
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Persistance.IPersistance">
            <summary>
            A persistant entiry
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Persistance.IPersistance.PersistModule(OpenCover.Framework.Model.Module)">
            <summary>
            A module that is to be persisted
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:OpenCover.Framework.Persistance.IPersistance.Commit">
            <summary>
            Save the instrumented data
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Persistance.IPersistance.GetSequencePointsForFunction(System.String,System.Int32,OpenCover.Framework.Model.InstrumentationPoint[]@)">
            <summary>
            Get the sequence points for a function
            </summary>
            <param name="modulePath">The identifying path to the module</param>
            <param name="functionToken">The token of the function</param>
            <param name="sequencePoints">The sequence points that make up that function</param>
            <returns>true - if sequence points exist</returns>
        </member>
        <member name="M:OpenCover.Framework.Persistance.IPersistance.GetBranchPointsForFunction(System.String,System.Int32,OpenCover.Framework.Model.BranchPoint[]@)">
            <summary>
            Get the branch points for a function
            </summary>
            <param name="modulePath">The identifying path to the module</param>
            <param name="functionToken">The token of the function</param>
            <param name="branchPoints">The branch points that make up that function</param>
            <returns>true - if sequence points exist</returns>
        </member>
        <member name="M:OpenCover.Framework.Persistance.IPersistance.IsTracking(System.String)">
            <summary>
            Check if the module is to be tracked i.e. instrumented
            </summary>
            <param name="modulePath"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCover.Framework.Persistance.IPersistance.GetClassFullName(System.String,System.Int32)">
            <summary>
            Get the full class name i.e. including namespace that the function is contained in
            </summary>
            <param name="modulePath"></param>
            <param name="functionToken"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCover.Framework.Persistance.IPersistance.SaveVisitData(System.Byte[])">
            <summary>
            extract and save the visit data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:OpenCover.Framework.Persistance.IPersistance.GetTrackingMethod(System.String,System.String,System.Int32,System.UInt32@)">
            <summary>
            
            </summary>
            <param name="modulePath"></param>
            <param name="assemblyName"></param>
            <param name="functionToken"></param>
            <param name="uniqueId"></param>
            <returns></returns>
        </member>
        <member name="P:OpenCover.Framework.Persistance.IPersistance.CoverageSession">
            <summary>
            The coverage session - this is the root entity of a persisted document
            </summary>
        </member>
        <member name="T:OpenCover.Framework.ExcludeFromCoverageAttribute">
            <summary>
            This attribute can be used to hide code whilst testing
            </summary>
        </member>
        <member name="T:OpenCover.Framework.IFilter">
            <summary>
            A filter that is used to decide whether an assembly/class pair is instrumented
            </summary>
        </member>
        <member name="M:OpenCover.Framework.IFilter.AddFilter(System.String)">
            <summary>
            Add a filter
            </summary>
            <param name="assemblyClassName">A filter is of the format (+ or -)[assemblyName]className, wildcards are allowed. <br/>
            i.e. -[mscorlib], -[System.*]*, +[App.*]*, +[*]*
            </param>
        </member>
        <member name="M:OpenCover.Framework.IFilter.UseAssembly(System.String)">
            <summary>
            Decides whether an assembly should be included in the instrumentation
            </summary>
            <param name="assemblyName">the name of the assembly under profile</param>
            <remarks>All assemblies matching either the inclusion or exclusion filter should be included 
            as it is the class that is being filtered within these unless the class filter is *</remarks>
        </member>
        <member name="M:OpenCover.Framework.IFilter.UseTestAssembly(System.String)">
            <summary>
            Decides whether an assembly should be analysed for test methods
            </summary>
            <param name="assemblyName">the name of the assembly under profile</param>
            <returns>true - if the assembly matches the test assembly filter</returns>
        </member>
        <member name="M:OpenCover.Framework.IFilter.AddFileExclusionFilters(System.String[])">
            <summary>
            Add file exclusion filters
            </summary>
            <param name="exclusionFilters"></param>
        </member>
        <member name="M:OpenCover.Framework.IFilter.InstrumentClass(System.String,System.String)">
            <summary>
            Determine if an [assemblyname]classname pair matches the current Exclusion or Inclusion filters  
            </summary>
            <param name="assemblyName">the name of the assembly under profile</param>
            <param name="className">the name of the class under profile</param>
            <returns>false - if pair matches the exclusion filter or matches no filters, true - if pair matches in the inclusion filter</returns>
        </member>
        <member name="M:OpenCover.Framework.IFilter.AddAttributeExclusionFilters(System.String[])">
            <summary>
            Add attribute exclusion filters
            </summary>
            <param name="exclusionFilters">An array of filters that are used to wildcard match an attribute</param>
        </member>
        <member name="M:OpenCover.Framework.IFilter.ExcludeByAttribute(Mono.Cecil.IMemberDefinition)">
            <summary>
            Is this entity excluded due to an attributeFilter
            </summary>
            <param name="entity">The entity to test</param>
            <returns></returns>
        </member>
        <member name="M:OpenCover.Framework.IFilter.ExcludeByFile(System.String)">
            <summary>
            Is this file excluded
            </summary>
            <param name="fileName">The name of the file to test</param>
            <returns></returns>
        </member>
        <member name="M:OpenCover.Framework.IFilter.AddTestFileFilters(System.String[])">
            <summary>
            Add test file filters
            </summary>
            <param name="testFilters"></param>
        </member>
        <member name="T:OpenCover.Framework.FilterType">
            <summary>
            The type of filter, an exclusion filter takes precedence over inclusion filter
            </summary>
        </member>
        <member name="F:OpenCover.Framework.FilterType.Inclusion">
            <summary>
            The filter is an inclusion type, i.e. if a assembly/class pair 
            matches the filter then it is included for instrumentation
            </summary>
        </member>
        <member name="F:OpenCover.Framework.FilterType.Exclusion">
            <summary>
            The filter is an exclusion type, i.e. if a assembly/class pair 
            matches the filter then it is excluded for instrumentation
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Filter">
            <summary>
             A filter that is used to decide whether an assembly/class pair is instrumented
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Filter.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Filter.ExcludeByAttribute(Mono.Cecil.IMemberDefinition)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:OpenCover.Framework.Model.InstrumentationModelBuilder.#ctor(OpenCover.Framework.Symbols.ISymbolManager)">
            <summary>
            Standard constructor
            </summary>
            <param name="symbolManager">the symbol manager that will provide the data</param>
        </member>
        <member name="T:OpenCover.Framework.Model.Class">
            <summary>
            An entity that contains methods
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Class.FullName">
            <summary>
            The full name of the class
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Class.Methods">
            <summary>
            A list of methods that make up the class
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Model.CoverageSession">
            <summary>
            A coverage session
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Model.CoverageSession.#ctor">
            <summary>
            initialise a coverage session
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.CoverageSession.SessionId">
            <summary>
            A unique session identifier
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.CoverageSession.Modules">
            <summary>
            A list of modules that have been profiled under the session
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Model.FileRef">
            <summary>
            A file reference within the coverage session and is used to point to an existing File entity
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Model.File">
            <summary>
            File details of a source file
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Model.File.#ctor">
            <summary>
            A standard constructor
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.File.FullPath">
            <summary>
            The path to file
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Model.Method">
            <summary>
            An entity that can be instrumented
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.MetadataToken">
            <summary>
            The MetadataToken used to identify this entity within the assembly
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.Name">
            <summary>
            The name of the method including namespace, return type and arguments
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.FileRef">
            <summary>
            A reference to a file in the file collection (used to help visualisation)
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.SequencePoints">
            <summary>
            A list of sequence points that have been produced for this method
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.BranchPoints">
            <summary>
            A list of branch points that have been identified for this method
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.MethodPoint">
            <summary>
            A method point to identify the entry of a method
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.Visited">
            <summary>
            Has the method been visited
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.CyclomaticComplexity">
            <summary>
            What is the cyclomatic complexity of this method.
            </summary>
            <remarks>Calculated using the Gendarme rules library</remarks>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.SequenceCoverage">
            <summary>
            What is the sequence coverage of this method
            </summary>
            <remarks>Rounded for ease</remarks>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.BranchCoverage">
            <summary>
            What is the branch coverage of this method
            </summary>
            <remarks>Rounded for ease</remarks>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.IsConstructor">
            <summary>
            Is this method a constructor
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.IsStatic">
            <summary>
            Is this method static
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.IsGetter">
            <summary>
            Is this method a property getter
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Method.IsSetter">
            <summary>
            Is this method a property setter
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Model.Module">
            <summary>
            The details of a module
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Model.Module.#ctor">
            <summary>
            simple constructor
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Module.FullName">
            <summary>
            The full path name to the module
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Module.Aliases">
            <summary>
            A list of aliases
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Module.ModuleName">
            <summary>
            The name of the module
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Module.Files">
            <summary>
            The files that make up the module
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Module.Classes">
            <summary>
            The classes that make up the module
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Module.TrackedMethods">
            <summary>
            Methods that are being tracked i.e. test methods
            </summary>
        </member>
        <member name="P:OpenCover.Framework.Model.Module.ModuleHash">
            <summary>
            A hash of the file used to group them together (especially when running against mstest)
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Model.SequencePoint">
            <summary>
            a sequence point
            </summary>
        </member>
        <member name="T:OpenCover.Framework.ProfilerRegistration">
            <summary>
            Used to register and unregister the profiler 
            </summary>
            <remarks>
            Intentionally not unit tested - as this is calling regsvr32 which does what it does and does not need more testing from me
            </remarks>
        </member>
        <member name="M:OpenCover.Framework.ProfilerRegistration.Register(System.Boolean)">
            <summary>
            Register the profiler using %SystemRoot%\system\regsvr32.exe
            </summary>
            <param name="userRegistration">true - user the /n /i:user switches</param>
        </member>
        <member name="M:OpenCover.Framework.ProfilerRegistration.Unregister(System.Boolean)">
            <summary>
            Unregister the profiler using %SystemRoot%\system\regsvr32.exe
            </summary>
            <param name="userRegistration">true - user the /n /i:user switches</param>
        </member>
        <member name="M:OpenCover.Framework.ProfilerRegistration.GetAssemblyLocation">
            <summary>
            Get the current location of this assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenCover.Framework.ProfilerRegistration.GetProfilerPath(System.Boolean)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenCover.Framework.Strategy.ITrackedMethodStrategy">
            <summary>
            Expose how a method is tracked 
            </summary>
        </member>
        <member name="M:OpenCover.Framework.Strategy.ITrackedMethodStrategy.GetTrackedMethods(System.Collections.Generic.IEnumerable{Mono.Cecil.TypeDefinition})">
            <summary>
            Return a list of methods that are to be tracked
            </summary>
            <param name="typeDefinitions">A list of type definitions (uses Mono.Cecil)</param>
            <returns></returns>
        </member>
        <member name="T:OpenCover.Framework.Strategy.TrackMSTestTestMethods">
            <summary>
            Track MSTest test methods
            </summary>
        </member>
        <member name="T:OpenCover.Framework.Strategy.TrackNUnitTestMethods">
            <summary>
            Track NUnit test methods
            </summary>
        </member>
    </members>
</doc>
